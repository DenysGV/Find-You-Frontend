import { useEffect, useState, useRef } from "react";
import Title from "../UX/Title"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
import { IAccountReplyComment, IAccountState, IComment } from "../../types/IAccounts"; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ç–∏–ø—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
import IUser from "../../types/IUser";
import axios from "axios";
import DOMPurify from 'dompurify';
import { useNavigate } from "react-router-dom";

export interface AccountEditorProps { // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ–±—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä
   replyComment?: IAccountReplyComment | null; // Allow null
   cancelAction: () => void;
   editComment?: IAccountReplyComment | null; // Allow null
   accountId: number;
   setResult: Function;
}

const AccountEditor = ({ replyComment, cancelAction, editComment, accountId, setResult }: AccountEditorProps) => {
   const apiUrlAdd: string = 'http://localhost:5000/add-comment';
   const apiUrlUpdate: string = 'http://localhost:5000/update-comment';
   const [error, setError] = useState<string | null>(null); // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π
   const [success, setSuccess] = useState<boolean>(false);
   const [showEmojiPicker, setShowEmojiPicker] = useState<boolean>(false);
   const [showColorPicker, setShowColorPicker] = useState<boolean>(false);
   const [activeColor, setActiveColor] = useState<string>("text-black");
   const storedUser = localStorage.getItem('user');
   const user: IUser | null = storedUser ? JSON.parse(storedUser) : null;
   const navigate = useNavigate()

   const emojiPickerRef = useRef<HTMLDivElement>(null);
   const colorPickerRef = useRef<HTMLDivElement>(null);
   const emojiButtonRef = useRef<HTMLButtonElement>(null);
   const colorButtonRef = useRef<HTMLButtonElement>(null);
   const editorRef = useRef<HTMLDivElement>(null);

   const emojis = [ /* ... –≤–∞—à —Å–ø–∏—Å–æ–∫ —ç–º–æ–¥–∑–∏ ... */
      'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ',
      'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', 'üòö', 'üòô',
      'üòã', 'üòõ', 'üòú', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î', 'ü§ê',
      'ü§®', 'üòê', 'üòë', 'üò∂', 'üòè', 'üòí', 'üôÑ', 'üò¨', 'ü§•', 'üòå',
      'üòî', 'üò™', 'ü§§', 'üò¥', 'üò∑', 'ü§í', 'ü§ï', 'ü§¢', 'ü§Æ', 'ü§ß'
   ];
   const colorOptions = [ /* ... –≤–∞—à–∏ –æ–ø—Ü–∏–∏ —Ü–≤–µ—Ç–∞ ... */
      { value: '#000000', class: 'text-black' }, { value: '#ff0000', class: 'text-red' },
      { value: '#0000ff', class: 'text-blue' }, { value: '#008000', class: 'text-green' },
      { value: '#800080', class: 'text-purple' }, { value: '#ffa500', class: 'text-orange' },
      { value: '#a52a2a', class: 'text-brown' }, { value: '#808080', class: 'text-gray' },
      { value: '#800000', class: 'text-maroon' }, { value: '#008080', class: 'text-teal' }
   ];

   useEffect(() => {
      if (editorRef.current) {
         let initialContent = ""; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ –¥–ª—è –æ—Ç–≤–µ—Ç–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
         if (editComment) {
            initialContent = editComment.text;
         } else if (replyComment) {
            // –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ –ø–æ–ª—è. –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ —Ü–∏—Ç–∞—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –µ–µ —Å—é–¥–∞.
            // –ù–∞–ø—Ä–∏–º–µ—Ä: initialContent = `<blockquote>${replyComment.text}</blockquote><p></p>`;
            initialContent = "";
         } else {
            // –≠—Ç–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è (–µ—Å–ª–∏ —ç—Ç–æ—Ç —Ä–µ–¥–∞–∫—Ç–æ—Ä –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∏ —Ç–∞–∫)
            initialContent = editorRef.current.innerHTML === "" || editorRef.current.innerHTML === "<p><br></p>" ? "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." : editorRef.current.innerHTML;
         }
         editorRef.current.innerHTML = sanitizeComment(initialContent);

         // –õ–æ–≥–∏–∫–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–Ω–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
         if (!editComment && !replyComment) {
            const handleFocus = () => {
               if (editorRef.current && editorRef.current.innerHTML === "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...") {
                  editorRef.current.innerHTML = "";
               }
            };
            const handleBlur = () => {
               if (editorRef.current && (editorRef.current.innerHTML === "" || editorRef.current.innerHTML === "<p><br></p>")) {
                  editorRef.current.innerHTML = "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...";
               }
            };
            editorRef.current.addEventListener('focus', handleFocus);
            editorRef.current.addEventListener('blur', handleBlur);
            return () => {
               if (editorRef.current) {
                  editorRef.current.removeEventListener('focus', handleFocus);
                  editorRef.current.removeEventListener('blur', handleBlur);
               }
            };
         } else if (editorRef.current && editorRef.current.innerHTML === "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...") {
            editorRef.current.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç—å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ/–æ—Ç–≤–µ—Ç
         }
      }
   }, [editComment, replyComment]); // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–µ–∂–∏–º–∞

   useEffect(() => {
      const handleClickOutside = (event: MouseEvent) => {
         if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target as Node) && emojiButtonRef.current && !emojiButtonRef.current.contains(event.target as Node)) {
            setShowEmojiPicker(false);
         }
         if (colorPickerRef.current && !colorPickerRef.current.contains(event.target as Node) && colorButtonRef.current && !colorButtonRef.current.contains(event.target as Node)) {
            setShowColorPicker(false);
         }
      };
      document.addEventListener('mousedown', handleClickOutside);
      return () => {
         document.removeEventListener('mousedown', handleClickOutside);
      };
   }, []);

   const addCommentRecursively = (comments: IComment[], replyToCommentId: number, newComment: IComment): IComment[] => {
      return comments.map(comment => {
         if (comment.id === replyToCommentId) {
            return { ...comment, children: [...comment.children, newComment] };
         }
         if (comment.children && comment.children.length > 0) {
            return { ...comment, children: addCommentRecursively(comment.children, replyToCommentId, newComment) };
         }
         return comment;
      });
   };

   const updateCommentText = (comments: IComment[], commentIdToUpdate: number | undefined, newText: string): IComment[] => {
      return comments.map(comment => {
         if (comment.id === commentIdToUpdate) {
            return { ...comment, text: newText };
         }
         if (comment.children && comment.children.length > 0) {
            return { ...comment, children: updateCommentText(comment.children, commentIdToUpdate, newText) };
         }
         return comment;
      });
   };

   const sanitizeComment = (text: string) => {
      return DOMPurify.sanitize(text, {
         ALLOWED_TAGS: ['p', 'b', 'i', 'u', 's', 'strong', 'em', 'br', 'h1', 'h2', 'h3', 'blockquote', 'pre', 'code', 'ol', 'ul', 'li', 'span'],
         ALLOWED_ATTR: ['class'],
         ADD_ATTR: ['target'],
         FORBID_TAGS: ['script', 'iframe', 'object', 'embed'],
         FORBID_ATTR: ['onerror', 'onload', 'onclick', 'onmouseover', 'style'],
         ALLOW_DATA_ATTR: false
      });
   };

   // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ handleSubmit –≤ AccountEditor.tsx

   const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
      e.preventDefault();
      setError(null);
      setSuccess(false);

      const editorContent = editorRef.current?.innerHTML || '';
      if (!editorContent.trim() || editorContent === "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..." || editorContent === "<p><br></p>") {
         setError("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
         setTimeout(() => setError(null), 3000);
         return;
      }
      const sanitizedComment = sanitizeComment(editorContent);

      try {
         if (editComment) { // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è parent_id –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            const commentIdToUpdate = editComment.parent_id;
            if (!commentIdToUpdate) {
               setError("–û—à–∏–±–∫–∞: ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
               setTimeout(() => setError(null), 3000);
               return;
            }

            // –ñ—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log("Updating comment with data:", { comment_id: commentIdToUpdate, text: sanitizedComment });

            await axios.put(apiUrlUpdate, {
               comment_id: commentIdToUpdate, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ ID –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
               text: sanitizedComment,
            });

            setResult((prev: IAccountState) => {
               if (prev.items) {
                  const updatedComments = updateCommentText(prev.items.comments, commentIdToUpdate, sanitizedComment);
                  return { ...prev, items: { ...prev.items, comments: updatedComments } };
               }
               return prev;
            });
            cancelAction(); // –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
         } else { // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏–ª–∏ –æ—Ç–≤–µ—Ç
            // –ü—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (!accountId) {
               setError("–û—à–∏–±–∫–∞: ID –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω");
               setTimeout(() => setError(null), 3000);
               return;
            }

            if (!user?.id) {
               setError("–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω");
               setTimeout(() => setError(null), 3000);
               return;
            }

            // –ñ—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            const requestData = {
               account_id: accountId,
               user_id: user.id,
               text: sanitizedComment,
               parent_id: replyComment ? replyComment.parent_id : null,
            };
            console.log("Adding comment with data:", requestData);

            await axios.post(apiUrlAdd, requestData);

            cancelAction(); // –ó–∞–∫—Ä—ã—Ç—å —Ä–µ–¥–∞–∫—Ç–æ—Ä
         }
         setSuccess(true);
         if (editorRef.current) editorRef.current.innerHTML = ""; // –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
         navigate(0)
         setTimeout(() => setSuccess(false), 3000);
      } catch (err: any) {
         console.error("API Error:", err.response || err);
         // –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –∫–æ–¥–æ–º –æ—Ç–≤–µ—Ç–∞, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ
         const errorMessage = err.response?.status
            ? `–û—à–∏–±–∫–∞ ${err.response.status}: ${err.response.data?.message || '–ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞'}`
            : "–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º";
         setError(errorMessage);
         setTimeout(() => setError(null), 5000);
         setSuccess(false);
      }
   };

   const getSelection = (): { selectedText: string, range: Range } | null => { /* ... –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è ... */
      const selection = document.getSelection();
      if (!selection || selection.rangeCount === 0) return null;
      const range = selection.getRangeAt(0);
      const selectedText = range.toString();
      if (!editorRef.current?.contains(range.commonAncestorContainer)) return null;
      return { selectedText, range };
   };
   const handleFormat = (format: string) => { /* ... –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è ... */
      if (!editorRef.current) return;
      editorRef.current.focus();
      document.execCommand(format, false);
   };
   const insertEmoji = (emoji: string) => { /* ... –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è ... */
      if (!editorRef.current) return;
      editorRef.current.focus();
      document.execCommand('insertText', false, emoji);
      setShowEmojiPicker(false);
   };
   const applyColor = (colorOption: { value: string, class: string }) => { /* ... –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è ... */
      if (!editorRef.current) return;
      editorRef.current.focus();
      setActiveColor(colorOption.class);
      setShowColorPicker(false);
      const selection = getSelection();
      if (selection && selection.selectedText.length > 0) {
         document.execCommand('delete', false);
         const formattedText = `<span class="${colorOption.class}">${selection.selectedText}</span>`;
         document.execCommand('insertHTML', false, formattedText);
      }
   };
   const handleBeforeInput = (e: React.FormEvent<HTMLDivElement>) => { /* ... –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è ... */
      const inputEvent = e.nativeEvent as InputEvent;
      const inputData = inputEvent.data;
      if (activeColor !== 'text-black' && inputData !== null) {
         e.preventDefault();
         let formattedText;
         if (inputData === ' ') {
            formattedText = `<span class="${activeColor}">&nbsp;</span>`;
         } else {
            formattedText = `<span class="${activeColor}">${inputData}</span>`;
         }
         document.execCommand('insertHTML', false, formattedText);
      }
   };

   let editorTitle = "–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π";
   let submitButtonText = "–î–æ–±–∞–≤–∏—Ç—å";

   if (editComment) {
      editorTitle = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è`;
      submitButtonText = "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å";
   } else if (replyComment && replyComment.author_nickname) {
      editorTitle = `–û—Ç–≤–µ—Ç –¥–ª—è ${replyComment.author_nickname}:`;
      submitButtonText = "–û—Ç–≤–µ—Ç–∏—Ç—å";
   }

   return (
      <div>
         <Title>{editorTitle}</Title>
         <form onSubmit={handleSubmit}>
            <div className="comment-editor">
               <div className="editor-toolbar">
                  <button type="button" onClick={() => handleFormat('bold')} className="toolbar-btn" title="–ñ–∏—Ä–Ω—ã–π"><span className="format-icon">B</span></button>
                  <button type="button" onClick={() => handleFormat('italic')} className="toolbar-btn" title="–ö—É—Ä—Å–∏–≤"><span className="format-icon">I</span></button>
                  <button type="button" onClick={() => handleFormat('underline')} className="toolbar-btn" title="–ü–æ–¥—á–µ—Ä–∫–Ω—É—Ç—ã–π"><span className="format-icon">U</span></button>
                  <button type="button" onClick={() => handleFormat('strikeThrough')} className="toolbar-btn" title="–ó–∞—á–µ—Ä–∫–Ω—É—Ç—ã–π"><span className="format-icon">S</span></button>
                  <div className="toolbar-divider"></div>
                  <div className="dropdown-container">
                     <button type="button" onClick={() => setShowEmojiPicker(!showEmojiPicker)} className="toolbar-btn emoji-btn" title="–°–º–∞–π–ª–∏–∫–∏" ref={emojiButtonRef}><span className="emoji-icon">üòä</span></button>
                     {showEmojiPicker && (
                        <div className="emoji-picker" ref={emojiPickerRef}>
                           {emojis.map((emoji, index) => (
                              <button key={index} type="button" onClick={() => insertEmoji(emoji)} className="emoji-item">{emoji}</button>
                           ))}
                        </div>
                     )}
                  </div>
                  <div className="dropdown-container">
                     <button type="button" onClick={() => setShowColorPicker(!showColorPicker)} className={`toolbar-btn color-btn ${activeColor}`} title="–¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞" ref={colorButtonRef}><span className="color-icon">A</span></button>
                     {showColorPicker && (
                        <div className="color-picker" ref={colorPickerRef}>
                           {colorOptions.map((colorOption, index) => (
                              <button key={index} type="button" onClick={() => applyColor(colorOption)} className={`color-item ${activeColor === colorOption.class ? 'active' : ''}`} style={{ backgroundColor: colorOption.value }} title={colorOption.value} />
                           ))}
                        </div>
                     )}
                  </div>
               </div>
               <div
                  ref={editorRef}
                  contentEditable
                  className="rich-text-editor"
                  onBeforeInput={handleBeforeInput}
                  suppressContentEditableWarning={true}
                  // –î–æ–±–∞–≤—å—Ç–µ aria-label –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                  aria-label={editComment ? "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" : replyComment ? `–û—Ç–≤–µ—Ç–∏—Ç—å ${replyComment.author_nickname}` : "–ù–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"}
               ></div>
               {error && <div className="error-message" style={{ color: 'red', marginTop: '5px' }}>{error}</div>}
               {success && <div className="success-message" style={{ color: 'green', marginTop: '5px' }}>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.</div>}
            </div>
            <div className="comment-editor__rules">
               {(!editComment && !replyComment) && ( // –ü—Ä–∞–≤–∏–ª–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è
                  <div>
                     <p className="text-muted small mt-2">
                        –ó–∞–ø—Ä–µ—â–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É, –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Ä–µ–∫–ª–∞–º—É.
                     </p>
                  </div>
               )}
               <div className="action-buttons" style={{ marginTop: '10px' }}>
                  {/* –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∞" –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è, –µ—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ */}
                  {(replyComment || editComment) && (
                     <button type="button" onClick={cancelAction} className="btn">–û—Ç–º–µ–Ω–∞</button>
                  )}
                  <button type="submit" className="btn btn-info">
                     {submitButtonText}
                  </button>
               </div>
            </div>
         </form>
         <style>{`
            .comment-editor {
               display: flex;
               flex-direction: column;
               width: 100%;
               border: 1px solid #ddd;
               border-radius: 4px;
               overflow: hidden;
            }
            
            .editor-toolbar {
               display: flex;
               padding: 8px;
               background-color: #f5f5f5;
               border-bottom: 1px solid #ddd;
               flex-wrap: wrap;
               align-items: center;
            }
            
            .toolbar-btn {
               background: none;
               border: none;
               margin-right: 5px;
               cursor: pointer;
               padding: 5px;
               display: flex;
               align-items: center;
               justify-content: center;
               border-radius: 3px;
               height: 30px;
               width: 30px;
            }
            
            .toolbar-btn:hover {
               background-color: #e0e0e0;
            }
            
            .toolbar-btn.active {
               background-color: #d8d8d8;
            }
            
            .toolbar-divider {
               width: 1px;
               height: 20px;
               background-color: #ddd;
               margin: 0 8px;
            }
            
            .rich-text-editor {
               width: 100%;
               min-height: 150px;
               padding: 12px;
               border: none;
               font-family: Arial, sans-serif;
               font-size: 14px;
               outline: none;
               overflow: auto;
            }
            
            .rich-text-editor:empty:before {
               content: "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...";
               color: #aaa;
            }
            
            .comment-editor__rules {
               display: flex;
               justify-content: space-between;
               align-items: center;
               margin-top: 10px;
            }
            
            .error-message {
               color: #d32f2f;
               margin: 8px;
               font-size: 14px;
            }
            
            .success-message {
               color: #388e3c;
               margin: 8px;
               font-size: 14px;
            }
            
            .format-icon {
               font-size: 14px;
               font-weight: 500;
            }
            
            .emoji-icon {
               font-size: 16px;
            }
            
            .color-icon {
               font-size: 16px;
               font-weight: bold;
            }
            
            /* –ö–Ω–æ–ø–∫–∞ —Ü–≤–µ—Ç–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ü–≤–µ—Ç */
            .color-btn.text-black .color-icon { color: #000000; }
            .color-btn.text-red .color-icon { color: #ff0000; }
            .color-btn.text-blue .color-icon { color: #0000ff; }
            .color-btn.text-green .color-icon { color: #008000; }
            .color-btn.text-purple .color-icon { color: #800080; }
            .color-btn.text-orange .color-icon { color: #ffa500; }
            .color-btn.text-brown .color-icon { color: #a52a2a; }
            .color-btn.text-gray .color-icon { color: #808080; }
            .color-btn.text-maroon .color-icon { color: #800000; }
            .color-btn.text-teal .color-icon { color: #008080; }
            
            /* Dropdown styles */
            .dropdown-container {
               position: relative;
            }
            
            .emoji-picker {
               position: absolute;
               top: 100%;
               left: -200px;
               z-index: 1000;
               display: grid;
               grid-template-columns: repeat(10, 1fr);
               background-color: white;
               border: 1px solid #ddd;
               border-radius: 4px;
               box-shadow: 0 2px 5px rgba(0,0,0,0.2);
               padding: 5px;
            }
            
            .emoji-item {
               background: none;
               border: none;
               cursor: pointer;
               font-size: 16px;
               padding: 2px;
               border-radius: 3px;
            }
            
            .emoji-item:hover {
               background-color: #f0f0f0;
            }
            
            .color-picker {
               position: absolute;
               top: 100%;
               left: -120px;
               z-index: 1000;
               display: grid;
               grid-template-columns: repeat(5, 1fr);
               background-color: white;
               border: 1px solid #ddd;
               border-radius: 4px;
               box-shadow: 0 2px 5px rgba(0,0,0,0.2);
               padding: 5px;
               width: 150px;
            }
            
            .color-item {
               width: 24px;
               height: 24px;
               border: 1px solid #ddd;
               border-radius: 50%;
               cursor: pointer;
               margin: 2px;
            }
            
            .color-item.active {
               transform: scale(1.2);
               box-shadow: 0 0 5px rgba(0,0,0,0.5);
            }
            
            .color-item:hover {
               transform: scale(1.1);
               box-shadow: 0 0 3px rgba(0,0,0,0.3);
            }
            
            .action-buttons {
               display: flex;
               gap: 10px;
            }
         
            
            .mr-2 {
               margin-right: 10px;
            }
            
            .mt-2 {
               margin-top: 10px;
            }
            
            .small {
               font-size: 12px;
            }
            
            .text-muted {
               color: #6c757d;
            }
            
            /* Text color classes */
            .text-black { color: #000000; }
            .text-red { color: #ff0000; }
            .text-blue { color: #0000ff; }
            .text-green { color: #008000; }
            .text-purple { color: #800080; }
            .text-orange { color: #ffa500; }
            .text-brown { color: #a52a2a; }
            .text-gray { color: #808080; }
            .text-maroon { color: #800000; }
            .text-teal { color: #008080; }
         `}</style>
      </div>
   );
};

export default AccountEditor;